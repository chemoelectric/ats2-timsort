divert(-1)

Copyright Â© 2022 Barry Schwartz

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License, as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received copies of the GNU General Public License
along with this program. If not, see
<https://www.gnu.org/licenses/>.

m4_define(`FUNCNAME',`TYPE`_timsort'')

m4_define(`CTYPE',
  `m4_if(TYPE,`pointer',`ats2_timsort_c_pointer',
         TYPE,`unsigned_int',`unsigned int',
         TYPE,`signed_char',`signed char',
         TYPE,`unsigned_char',`unsigned char',
         TYPE,`unsigned_short',`unsigned short',
         TYPE,`unsigned_long',`unsigned long',
         TYPE,`long_long',`long long',
         TYPE,`unsigned_long_long',`unsigned long long',
         TYPE,`long_double',`long double',
         TYPE,`int128_t',`__int128_t',
         TYPE,`uint128_t',`__uint128_t',
         TYPE)')

m4_define(`ATSTYPE',
  `m4_if(TYPE,`pointer',`ptr',
         TYPE,`unsigned_int',`uint',
         TYPE,`signed_char',`schar',
         TYPE,`unsigned_char',`uchar',
         TYPE,`short',`sint',
         TYPE,`unsigned_short',`usint',
         TYPE,`long',`lint',
         TYPE,`unsigned_long',`ulint',
         TYPE,`long_long',`llint',
         TYPE,`unsigned_long_long',`ullint',
         TYPE,`long_double',`ldouble',
         TYPE,`intptr_t',`intptr',
         TYPE,`uintptr_t',`uintptr',
         TYPE,`intmax_t',`ats2_timsort_c_intmax_t',
         TYPE,`uintmax_t',`ats2_timsort_c_uintmax_t',
         TYPE,`int8_t',`int8',
         TYPE,`uint8_t',`uint8',
         TYPE,`int16_t',`int16',
         TYPE,`uint16_t',`uint16',
         TYPE,`int32_t',`int32',
         TYPE,`uint32_t',`uint32',
         TYPE,`int64_t',`int64',
         TYPE,`uint64_t',`uint64',
         TYPE,`int128_t',`ats2_timsort_c_int128_t',
         TYPE,`uint128_t',`ats2_timsort_c_uint128_t',
         TYPE)')

m4_define(`DEFAULT_DEFINITION',
`
typedef ats2_timsort_c_intmax_t = $extype"intmax_t"
typedef ats2_timsort_c_uintmax_t = $extype"uintmax_t"

m4_ifdef(`SIZEOF_INT128_T',
  `typedef ats2_timsort_c_int128_t = $extype"__int128_t"')
m4_ifdef(`SIZEOF_UINT128_T',
  `typedef ats2_timsort_c_uint128_t = $extype"__uint128_t"')

extern fn
ats2_timsort_c_`'FUNCNAME
          {n         : int}
          {arrsz     : int | n <= arrsz}
          (arr       : &array (ATSTYPE, arrsz),
           n         : size_t n,
           less_than : (ATSTYPE, ATSTYPE) -<fun> int)
    : void = "ext#ats2_timsort_c_`'FUNCNAME"

implement
ats2_timsort_c_`'FUNCNAME (arr, n, less_than) =
  let
    implement
    array_timsort$lt<ATSTYPE> (x, y) =
      (x \less_than y) <> 0
  in
    array_timsort<ATSTYPE> (arr, n)
  end
')

m4_define(`INDIRECT_DEFINITION',
`
%{
void
ats2_timsort_c_`'FUNCNAME (void *arr, size_t n, void *less_than)
{
  ats2_timsort_c_`'$1`'_timsort (arr, n, less_than);
}
%}
')

m4_define(`SIGNED_DEFINITION',
  `m4_if($1,SIZEOF_INT,`INDIRECT_DEFINITION(int)',
         $1,SIZEOF_SIGNED_CHAR,`INDIRECT_DEFINITION(signed_char)',
         $1,SIZEOF_SHORT,`INDIRECT_DEFINITION(short)',
         $1,SIZEOF_LONG,`INDIRECT_DEFINITION(long)',
         $1,SIZEOF_LONG_LONG,`INDIRECT_DEFINITION(long_long)',
         `DEFAULT_DEFINITION')')

m4_define(`UNSIGNED_DEFINITION',
  `m4_if($1,SIZEOF_UNSIGNED_INT,`INDIRECT_DEFINITION(unsigned_int)',
         $1,SIZEOF_UNSIGNED_CHAR,`INDIRECT_DEFINITION(unsigned_char)',
         $1,SIZEOF_UNSIGNED_SHORT,`INDIRECT_DEFINITION(unsigned_short)',
         $1,SIZEOF_UNSIGNED_LONG,`INDIRECT_DEFINITION(unsigned_long)',
         $1,SIZEOF_UNSIGNED_LONG_LONG,`INDIRECT_DEFINITION(unsigned_long_long)',
         `DEFAULT_DEFINITION')')

divert`'dnl
