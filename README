Timsort (powersort) for ATS2/Postiats and C
-------------------------------------------

Included:

  * An array sort, for ATS2, that supports linear types. The insertion
    sort uses binary search, and the merge uses galloping if this
    seems to help.

  * Sort functions for C, which are the foregoing array sort
    specialized for particular C types. The most important of these
    types is probably void pointers. (The void-pointers sort can be
    used, in particular, to sort strings.) Also supported are numerous
    integer and floating point types.

I may also add a sort that sorts arbitrarily sized blocks of
memory. This could be used to make a drop-in replacement for qsort.

And I may add a sort for list_vt. This would have more conventional
insertion sort and merge.

It is possible to make it so you do not need ATS to compile the
program, as long as someone has already generated the C code from the
ATS. However, I have not yet decided whether to implement this
feature. Because the C generated by patsopt is impenetrable, you would
almost certainly need ATS if you had to modify the
programs. Fortunately ATS requires only standard C, and optionally the
GNU Multiple Precision Library (which I do use), and is not very
difficult to install.


References on the algorithms:

  * listsort.txt (https://archive.ph/XWTy3)

  * J. Ian Munro and Sebastian Wild, ‘Nearly-optimal mergesorts: fast,
    practical sorting methods that optimally adapt to existing
    runs’, 10 May 2018. arXiv:1805.04154v1.

  * H. Bottenbruch, "Structure and use of ALGOL 60", Journal of the
    ACM, Volume 9, Issue 2, April 1962, pp.161-221.
    https://doi.org/10.1145/321119.321120 (Pages 214 and 215 describe
    how to do a binary search.)

  * https://en.wikipedia.org/w/index.php?title=Binary_search_algorithm&oldid=1062988272#Alternative_procedure
